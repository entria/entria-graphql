// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate edit and edit mutation files 1`] = `
Object {
  "edit": "//@flow
import * as React from 'react';
import { graphql, createFragmentContainer } from 'react-relay/compat';
import { hot } from 'react-hot-loader';

import createQueryRenderer from '../../relay/createQueryRenderer';

import ExampleForm from './ExampleForm';
import type { ExampleEdit_viewer } from './__generated__/ExampleEdit_viewer.graphql';

type Props = {
  viewer: ExampleEdit_viewer,
};
class ExampleEdit extends React.PureComponent<Props> {
  render() {
    const { viewer } = this.props;
    const { _node } = viewer;

    return <ExampleForm viewer={viewer} node={_node} />;
  }
}

const ExampleEditFragment = createFragmentContainer(ExampleEdit, {
  viewer: graphql\`
    fragment ExampleEdit_viewer on Viewer {
      id
      ...ExampleForm_viewer
      _node(id: $id) {
        ...ExampleForm_node
      }
    }
  \`,
});

export default hot(module)(
  createQueryRenderer(ExampleEditFragment, ExampleEdit, {
    query: graphql\`
      query ExampleEditQuery($id: ID!) {
        viewer {
          ...ExampleEdit_viewer
        }
      }
    \`,
    queriesParams: ({ match: { params } }) => ({ id: params.id }),
  }),
);
",
  "editMutation": "// @flow
import { commitMutation, graphql } from 'react-relay/compat';

import RelayStore from '../../relay/RelayStore';

import type {
  ExampleEditMutationVariables,
  ExampleEditMutationResponse,
} from './__generated__/ExampleEditMutation.graphql';

type ExampleEditMutationInput = $PropertyType<
  ExampleEditMutationVariables,
  'input',
>;

const mutation = graphql\`
  mutation ExampleEditMutation($input: ExampleEditInput!) {
    ExampleEdit(input: $input) {
      example {
        id
      }
      error
    }
  }
\`;

const commit = (
  input: ExampleEditMutationInput,
  onCompleted: (response: ExampleEditMutationResponse) => void,
  onError: (error: Error) => void,
) => {
  const variables = {
    input,
  };

  commitMutation(RelayStore._env, {
    mutation,
    variables,
    onCompleted,
    onError,
  });
};

export default { commit };

",
}
`;
