//@flow
import * as React from 'react';
import { graphql, createFragmentContainer } from 'react-relay/compat';
import { hot } from 'react-hot-loader';

import createQueryRenderer from '../../relay/createQueryRenderer';

import <%= name %>Form from './<%= name %>Form';
import type { <%= name %>Edit_viewer } from './__generated__/<%= name %>Edit_viewer.graphql';

type Props = {
  viewer: <%= name %>Edit_viewer,
};
class <%= name %>Edit extends React.PureComponent<Props> {
  render() {
    const { viewer } = this.props;
    const { _node } = viewer;

    return <<%= name %>Form viewer={viewer} node={_node} />;
  }
}

const <%= name %>EditFragment = createFragmentContainer(<%= name %>Edit, {
  viewer: graphql`
    fragment <%= name %>Edit_viewer on Viewer {
      id
      ...<%= name %>Form_viewer
      _node(id: $id) {
        ...<%= name %>Form_node
      }
    }
  `,
});

export default hot(module)(
  createQueryRenderer(<%= name %>EditFragment, <%= name %>Edit, {
    query: graphql`
      query <%= name %>EditQuery($id: ID!) {
        viewer {
          ...<%= name %>Edit_viewer
        }
      }
    `,
    queriesParams: ({ match: { params } }) => ({ id: params.id }),
  }),
);
