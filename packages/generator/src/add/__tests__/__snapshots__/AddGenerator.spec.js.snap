// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate add and add mutation files 1`] = `
Object {
  "add": "//@flow
import * as React from 'react';
import { graphql, createFragmentContainer } from 'react-relay/compat';
import { hot } from 'react-hot-loader';

import createQueryRenderer from '../../relay/createQueryRenderer';

import ExampleForm from './ExampleForm';
import type { ExampleAdd_viewer } from './__generated__/ExampleAdd_viewer.graphql';

type Props = {
  viewer: ExampleAdd_viewer,
};
class ExampleAdd extends React.PureComponent<Props> {
  render() {
    const { viewer } = this.props;
    return <ExampleForm viewer={viewer} />;
  }
}

const ExampleAddFragment = createFragmentContainer(ExampleAdd, {
  viewer: graphql\`
    fragment ExampleAdd_viewer on Viewer {
      id
      ...ExampleForm_viewer
    }
  \`,
});

export default hot(module)(
  createQueryRenderer(ExampleAddFragment, ExampleAdd, {
    query: graphql\`
      query ExampleAddQuery {
        viewer {
          ...ExampleAdd_viewer
        }
      }
    \`,
  }),
);
",
  "addMutation": "// @flow
import { commitMutation, graphql } from 'react-relay/compat';

import RelayStore from '../../relay/RelayStore';

import type {
  ExampleAddMutationVariables,
  ExampleAddMutationResponse,
} from './__generated__/ExampleAddMutation.graphql';

type ExampleAddMutationInput = $PropertyType<
  ExampleAddMutationVariables,
  'input',
>;

// relay classic
const getConfigs = viewerId => {
  return [
    {
      type: 'RANGE_ADD',
      parentName: 'viewer',
      parentID: viewerId,
      connectionName: 'examples',
      edgeName: 'exampleEdge',
      rangeBehaviors: () => {
        return 'prepend';
      },
    },
  ];
};

const mutation = graphql\`
  mutation ExampleAddMutation($input: ExampleAddInput!) {
    ExampleAdd(input: $input) {
      exampleEdge {
        __typename
        cursor
        node {
          __typename
          id
        }
      }
      error
    }
  }
\`;

const commit = (
  viewerId: string,
  input: ExampleAddMutationInput,
  onCompleted: (response: ExampleAddMutationResponse) => void,
  onError: (error: Error) => void,
) => {
  const variables = {
    input,
  };

  commitMutation(RelayStore._env, {
    mutation,
    variables,
    onCompleted,
    onError,
    configs: getConfigs(viewerId),
  });
};

export default { commit };

",
}
`;
