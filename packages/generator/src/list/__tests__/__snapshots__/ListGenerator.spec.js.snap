// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate list files 1`] = `
Object {
  "list": "// @flow
import * as React from 'react';
import { graphql, createRefetchContainer } from 'react-relay/compat';
import { withRouter } from 'react-router-dom';
import styled from 'styled-components';
import { hot } from 'react-hot-loader';

import { Table, Content, InputFieldAlongside, Icon } from '../common';
import { ActionButton, Actions, RefreshButton } from '../Subheader';
import createQueryRenderer from '../../relay/createQueryRenderer';
import { routeTo } from '../../router/utils/routeTo';

import type { ContextRouter } from 'react-router-dom';
import type { RelayRefetchProp } from 'react-relay';
import type { TableColumn } from '../common/Table/Table';
import type { ExampleList_viewer } from './__generated__/ExampleList_viewer.graphql';

const TableContainer = styled.div\`
  background: #ffffff;
  padding: 10px;
  margin: 10px;
  box-shadow: 3px 1px 3px 0 rgba(0, 0, 0, 0.3);
\`;

const SearchField = styled.div\`
  width: 280px;
  padding: 10px 0 0 25px;
  div {
    border-bottom: 1px solid lightgrey;
    height: auto;
    input {
      border-bottom: none !important;
      padding: 10px;
      color: #9e9e9e !important;
      background-color: rgba(0, 0, 0, 0) !important;
      margin-left: 20px;
    }
    input::placeholder {
      font-weight: 300;
      color: #9e9e9e !important;
    }
  }
\`;

const NewButton = styled(ActionButton)\`
  height: 26px;
  width: 200px;
\`;

type Props = {
  viewer: ExampleList_viewer,
  relay: RelayRefetchProp,
} & ContextRouter;

type State = {
  isLoading: boolean,
  quantityPerPage: number,
  searchValue: ?string,
};
class ExampleList extends Component<Props, State> {
  state = {
    isLoading: false,
    quantityPerPage: 10,
    searchValue: null,
  };

  // TODO - add more columns
  tableColumns: TableColumn<any>[] = [
    {
      property: 'name',
      header: {
        label: 'Nome',
      },
    },
  ];

  handleRefreshList = () => {
    this.setState({
      isLoading: true,
    });

    const refetchVariables = fragmentVariables => ({
      ...fragmentVariables,
    });
    this.props.relay.refetch(
      refetchVariables,
      null,
      () => {
        this.setState({
          isFetching: false,
        });
      },
      {
        force: true,
      },
    );
  };

  handleViewExample = ({ id }) => this.props.history.push(routeTo('example.view', { id }));

  setQuantityPerPage = value => {
    this.setState({ quantityPerPage: value }, () => this.loadPage(true, value));
  };

  loadPage = async (isForward, increasePgSize) => {
    const { relay, viewer } = this.props;

    this.setState({
      isLoading: true,
    });

    const refetchVariables = isForward
      ? this.loadPageForwardVars(viewer, increasePgSize)
      : this.loadPageBackwardsVars(viewer);

    await relay.refetch(refetchVariables, null);

    this.setState({
      isLoading: false,
    });
  };

  loadPageForwardVars = (viewer, increasePgSize) => {
    const lastItem = viewer.products.pageInfo.endCursor;
    return fragmentVariables => ({
      ...fragmentVariables,
      first: increasePgSize || this.state.quantityPerPage,
      after: increasePgSize ? null : lastItem,
    });
  };

  loadPageBackwardsVars = viewer => {
    const firstItem = viewer.products.pageInfo.startCursor;
    return fragmentVariables => ({
      ...fragmentVariables,
      last: this.state.quantityPerPage,
      first: null,
      before: firstItem,
    });
  };

  handleSearch = e => {
    e.persist();

    const refetchVariables = fragmentVariables => ({
      ...fragmentVariables,
      search: e.target.value,
    });

    this.setState({
      isLoading: true,
    });

    this.props.relay.refetch(refetchVariables, null, () => {
      this.setState({
        searchValue: e.target.value,
        isLoading: false,
      });
    });
  };

  handleRefreshList = () => {
    const refetchVariables = fragmentVariables => ({
      ...fragmentVariables,
      first: 10,
    });

    this.setState({
      isLoading: true,
    });

    this.props.relay.refetch(refetchVariables, null, () => {
      this.setState({
        isLoading: false,
      });
    });
  };

  handleNewProduct = () => {
    this.props.history.push(routeTo('example.add'));
  };

  render() {
    const { Examples } = this.props.viewer;
    const { searchValue, isLoading, quantityPerPage } = this.state;

    const { pageInfo, endCursorOffset, startCursorOffset, totalCount } = Examples;
    const actions = (
      <Actions>
        <NewButton
          icon={<Icon> add </Icon>}
          label=\\"Cadastrar Example\\"
          onClick={this.handleNewExample}
        />
        <RefreshButton onRefresh={this.handleRefreshList} />
      </Actions>
    );

    return (
      <Content title=\\"Examples\\" actions={actions}>
        <SearchField>
          <InputFieldAlongside
            name=\\"search\\"
            label={null}
            defaultValue={searchValue}
            sideContent={<Icon style={styles.icon}>search</Icon>}
            disabled={false}
            onChangeValue={this.handleSearch}
            type=\\"text\\"
            placeholder=\\"Buscar Examples\\"
          />
        </SearchField>
        <TableContainer>
          <Table
            columns={this.tableColumns}
            rows={Examples}
            onRowClick={this.handleViewProduct}
            isLoading={isLoading}
            hasNextPage={pageInfo.hasNextPage}
            totalItems={totalCount}
            rowsPerPage={quantityPerPage}
            handleRowsPerPageChange={this.setQuantityPerPage}
            firstItemIndex={startCursorOffset}
            lastItemIndex={endCursorOffset}
            handlePageChange={this.loadPage}
          />
        </TableContainer>
      </Content>
    );
  }
}

const styles = {
  icon: {
    left: -255,
    color: '#616161',
    cursor: 'pointer',
  },
};

const ExampleListRefetchContainer = createRefetchContainer(
  ExampleList,
  {
    viewer: graphql\`
      fragment ExampleList_viewer on Viewer
        @argumentDefinitions(
          first: { type: Int }
          last: { type: Int }
          before: { type: String }
          after: { type: String }
          search: { type: String }
        ) {
        Examples(first: $first, last: $last, after: $after, before: $before, search: $search)
          @connection(key: \\"ExampleList_Examples\\", filters: []) {
          endCursorOffset
          startCursorOffset
          count
          pageInfo {
            hasNextPage
            hasPreviousPage
            startCursor
            endCursor
          }
          edges {
            node {
              id
              name
            }
          }
          totalCount
        }
      }
    \`,
  },
  graphql\`
    query ExampleListRefetchQuery(
      $after: String
      $before: String
      $first: Int
      $last: Int
      $search: String
    ) {
      viewer {
        ...ExampleList_viewer
          @arguments(first: $first, last: $last, after: $after, before: $before, search: $search)
      }
    }
  \`,
);

export default hot(module)(
  createQueryRenderer(ExampleListRefetchContainer, ExampleList, {
    query: graphql\`
      query ExampleListQuery(
        $after: String
        $before: String
        $first: Int
        $last: Int
        $search: String
      ) {
        viewer {
          ...ExampleList_viewer
            @arguments(first: $first, last: $last, after: $after, before: $before, search: $search)
        }
      }
    \`,
    variables: {
      first: 10,
      cursor: null,
      search: '',
    },
  }),
);
",
}
`;
