// @flow
import DataLoader from 'dataloader';
import <%= name %>Model from './<%= name %>Model';
import { connectionFromMongoCursor, mongooseLoader } from '@entria/graphql-mongoose-loader';
import type { ConnectionArguments } from 'graphql-relay';
import type { GraphQLContext } from '../../TypeDefinition';

type <%= name %>Type = {
  id: string,
  _id: string,
  <%_ for (field of schema.fields) { -%>
  <%- field.name + ': ' + field.flowType -%>,
  <%_ } -%>
}

export default class <%= name %> {
  id: string;
  _id: string;
  <%_ for (field of schema.fields) { -%>
  <%- field.name + ': ' + field.flowType -%>;
  <%_ } -%>

  constructor(data: <%= name %>Type) {
    this.id = data.id;
    this._id = data._id;
    <%_ for (field of schema.fields) { -%>
    this.<%- field.name -%> = data.<%- field.name -%>;
    <%_ } -%>
  }
}

export const getLoader = () => new DataLoader(ids => mongooseLoader(<%= name %>Model, ids));

const viewerCanSee = () => true;

export const load = async ({ dataloaders }: GraphQLContext, id: ?string) => {
  if (!id) return null;

  try {
    const data = await dataloaders.<%= rawName %>Loader.load(id.toString());

    if (!data) return null;

    return viewerCanSee() ? new <%= name %>(data) : null;
  } catch (err) {
    return null
  };
};

export const clearCache = ({ dataloaders }: GraphQLContext, id: string) => {
  return dataloaders.<%= rawName %>Loader.clear(id.toString());
};

export const load<%= pluralName %> = async (context: GraphQLContext, args: ConnectionArguments) => {
  // TODO: specify conditions
  const <%= pluralCamelCaseName %> = <%= name %>Model.find({});

  return connectionFromMongoCursor({
    cursor: <%= pluralCamelCaseName %>,
    context,
    args,
    loader: load,
  });
};
