// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generate a type 1`] = `
Object {
  "type": "// @flow
import {
  GraphQLObjectType,
  GraphQLString,
} from 'graphql';
import { globalIdField } from 'graphql-relay';
import type { GraphQLObjectTypeConfig } from 'graphql';
import type { GraphQLContext } from '../../TypeDefinition';

import { NodeInterface } from '../../../graphql/interface/NodeInterface';
import Example from './ExampleLoader';

export default new GraphQLObjectType(
  ({
    name: 'Example',
    description: 'Represents Example',
    fields: () => ({
      id: globalIdField('Example'),
      example: {
        type: GraphQLString,
        description: 'My example field',
        resolve: obj => obj.example,
      },
    }),
    interfaces: () => [NodeInterface],
  }: GraphQLObjectTypeConfig<Example, GraphQLContext>),
);
",
  "typeTest": "import { graphql } from 'graphql';
import { schema } from '../../schema';
import {
  getContext,
  connectMongoose,
  clearDbAndRestartCounters,
  disconnectMongoose,
} from '../../../../test/helper';
import {
  User,
  Example,
} from '../../../models';

beforeAll(connectMongoose);

beforeEach(clearDbAndRestartCounters);

afterAll(disconnectMongoose);

it('should retrieve a record', async () => {
  const user = await new User({
    name: 'user',
    email: 'user@example.com',
  }).save();

  // TODO: query to return a record
  const query = \`
    query Q {
      node(id:\\"123\\") {
        id
      }
    }
  \`;

  const variables = {

  };
  const rootValue = {};
  const context = getContext({ user });

  const { errors, data } = await graphql(schema, query, rootValue, context, variables);

  expect(data.node).toBe(null);
  expect(errors).toBe(undefined);
});
",
}
`;

exports[`generate a type with schema 1`] = `
Object {
  "type": "// @flow
import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLList,
} from 'graphql';
import { globalIdField } from 'graphql-relay';
import type { GraphQLObjectTypeConfig } from 'graphql';
import type { GraphQLContext } from '../../TypeDefinition';

import { NodeInterface } from '../../../graphql/interface/NodeInterface';
import UserType from '../user/UserType';
import * as UserLoader from '../user/UserLoader';
import CommentType from '../comment/CommentType';
import * as CommentLoader from '../comment/CommentLoader';
import Post from './PostLoader';

export default new GraphQLObjectType(
  ({
    name: 'Post',
    description: 'Represents Post',
    fields: () => ({
      id: globalIdField('Post'),
      title: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.title,
      },
      user: {
        type: UserType,
        description: 'User that created this post',
        resolve: async (obj, args, context) => await UserLoader.load(context, obj.user),
      },
      slug: {
        type: GraphQLString,
        description: 'Used for SEO',
        resolve: obj => obj.slug,
      },
      tags: {
        type: GraphQLList(GraphQLString),
        description: '',
        resolve: obj => obj.tags,
      },
      oldSlugs: {
        type: GraphQLList(GraphQLString),
        description: 'Old slugs used by this post',
        resolve: obj => obj.oldSlugs,
      },
      comments: {
        type: GraphQLList(CommentType),
        description: '',
        resolve: async (obj, args, context) => await CommentLoader.loadCommentsByIds(context, obj.comments),
      },
      externalComments: {
        type: GraphQLList(CommentType),
        description: 'Comments from external source',
        resolve: async (obj, args, context) => await CommentLoader.loadExternalCommentsByIds(context, obj.externalComments),
      },
      createdAt: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.createdAt ? obj.createdAt.toISOString() : null,
      },
      updatedAt: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.updatedAt ? obj.updatedAt.toISOString() : null,
      },
    }),
    interfaces: () => [NodeInterface],
  }: GraphQLObjectTypeConfig<Post, GraphQLContext>),
);
",
  "typeTest": "import { graphql } from 'graphql';
import { schema } from '../../schema';
import {
  getContext,
  connectMongoose,
  clearDbAndRestartCounters,
  disconnectMongoose,
} from '../../../../test/helper';
import {
  User,
  Post,
} from '../../../models';

beforeAll(connectMongoose);

beforeEach(clearDbAndRestartCounters);

afterAll(disconnectMongoose);

it('should retrieve a record', async () => {
  const user = await new User({
    name: 'user',
    email: 'user@example.com',
  }).save();

  // TODO: query to return a record
  const query = \`
    query Q {
      node(id:\\"123\\") {
        id
      }
    }
  \`;

  const variables = {

  };
  const rootValue = {};
  const context = getContext({ user });

  const { errors, data } = await graphql(schema, query, rootValue, context, variables);

  expect(data.node).toBe(null);
  expect(errors).toBe(undefined);
});
",
}
`;

exports[`generate a type with schema and without timestamps 1`] = `
Object {
  "type": "// @flow
import {
  GraphQLObjectType,
  GraphQLString,
  GraphQLBoolean,
} from 'graphql';
import { globalIdField } from 'graphql-relay';
import type { GraphQLObjectTypeConfig } from 'graphql';
import type { GraphQLContext } from '../../TypeDefinition';

import { NodeInterface } from '../../../graphql/interface/NodeInterface';
import User from './UserLoader';

export default new GraphQLObjectType(
  ({
    name: 'User',
    description: 'Represents User',
    fields: () => ({
      id: globalIdField('User'),
      name: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.name,
      },
      password: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.password,
      },
      email: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.email,
      },
      active: {
        type: GraphQLBoolean,
        description: '',
        resolve: obj => obj.active,
      },
      lastLoginAt: {
        type: GraphQLString,
        description: '',
        resolve: obj => obj.lastLoginAt ? obj.lastLoginAt.toISOString() : null,
      },
    }),
    interfaces: () => [NodeInterface],
  }: GraphQLObjectTypeConfig<User, GraphQLContext>),
);
",
  "typeTest": "import { graphql } from 'graphql';
import { schema } from '../../schema';
import {
  getContext,
  connectMongoose,
  clearDbAndRestartCounters,
  disconnectMongoose,
} from '../../../../test/helper';
import {
  User,
  User,
} from '../../../models';

beforeAll(connectMongoose);

beforeEach(clearDbAndRestartCounters);

afterAll(disconnectMongoose);

it('should retrieve a record', async () => {
  const user = await new User({
    name: 'user',
    email: 'user@example.com',
  }).save();

  // TODO: query to return a record
  const query = \`
    query Q {
      node(id:\\"123\\") {
        id
      }
    }
  \`;

  const variables = {

  };
  const rootValue = {};
  const context = getContext({ user });

  const { errors, data } = await graphql(schema, query, rootValue, context, variables);

  expect(data.node).toBe(null);
  expect(errors).toBe(undefined);
});
",
}
`;
