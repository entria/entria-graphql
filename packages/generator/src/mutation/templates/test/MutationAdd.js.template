import { graphql } from 'graphql';
import { schema } from '../../schema';
import { setupTest, getContext } from '../../../test/helper';

import { User } from '<%= directories.model %>';
import <%= name %> from '<%= directories.model %>/<%= name %>';

beforeEach(async () => await setupTest());

it('should not allow anonymous user', async () => {
  //language=GraphQL
  const query = `
    mutation M($example: String) {
      <%= mutationName %>(input: {
        example: $example
      }) {
        exampleFieldToRetrieve
      }
    }
  `;

  const variables = {
  };
  const rootValue = {};
  const context = getContext();

  const result = await graphql(schema, query, rootValue, context, variables);

  expect(result).toMatchSnapshot();
});

it('should create a record on database', async () => {
  const user = new User({
    name: 'user',
    email: 'user@example.com',
  });

  await user.save();

  //language=GraphQL
  const query = `
    mutation M($example: String) {
      <%= mutationName %>(input: {
        example: $example
      }) {
        exampleFieldToRetrieve
      }
    }
  `;

  const variables = {
  };
  const rootValue = {};
  const context = getContext({ user });

  const result = await graphql(schema, query, rootValue, context, variables);

  expect(result).toMatchSnapshot();
});
